const ChaningCanvas=((a,b)=>{function c(a){return a in j}function d(a){return"string"==typeof a||a instanceof CanvasGradient}function e(a){return null!=a&&(Array.isArray(a)||"number"==typeof a.length&&-1<a.length)}function f(a){return a+(["st","nd"][a%10-1]||"th")}function g(a){return a instanceof window.HTMLElement}const h=b.createElement("canvas"),j=h.getContext("2d"),k="Failed to execute";return class a{constructor(a){this.element=a,this.ctx=a.getContext("2d"),this.path=[]}static create(c){const d=b.createElement("canvas");return c={width:300,height:300,...Object(c)},Object.assign(d,c),new a(d)}static prepareStyle(a){for(let b in a)c(b)||console.warn(`Can't find ${b} is valid style key.`);return a}appendInto(a){if(!g(a))throw new TypeError(`${k} 'appendInto': parameter 1 is not of type 'HTMLElement'.`);return a.appendChild(this.element),this}set(a){return Object.assign(this.ctx,Object(a)),this}execute(a,b){const c=this.ctx;return c.save(),this.set(a),b(this),c.restore(),this}clear(a,b){const c=this.element;return a=a||c.width,b=b||c.height,this.ctx.clearRect(0,0,a,b),this}closePath(){return this.ctx.closePath(),this.path.length=0,this}addPath(...a){const b=this.ctx,c=`${k} 'addPath':`;return a=a.map((a,b)=>{if(!e(a))throw new TypeError(`${c} ${f(b)} element of path is not of type 'Array'.`);if(a=Array.from(a),2>a.length)throw new TypeError(`${c} 2 element required, but only ${a.length} included in ${f(b)} element of path.`);return Array.from(a)}),this.path.push(...a.map(a=>({type:"point",point:a}))),this}_processPath(a){const b=this.ctx;return this.path.forEach((c,d)=>{switch(c.type){case"point":b[`${d?"line":"move"}To`](...c.point);break;default:throw this.path.length=0,new TypeError(`${a} ${f(i)} element of path data is Unkwon path type.`);}}),this}fill(a,b,c,e,f){const g=this.element,h=this.ctx;return(a=d(a)?{fillStyle:a}:{},console.log(arguments.length),[0,1].includes(arguments.length)&&this.path.length)?(console.log(1),this._processPath(`${k} 'fill':`).execute(a,()=>h.fill())):(b=b||0,c=c||0,e=null==e?g.width:e,f=null==f?g.height:f,this.execute(a,()=>h.fillRect(b,c,e,f)))}stroke(a){return this._processPath(`${k} 'stroke':`).execute(a,a=>a.ctx.stroke())}}})(this,document);
