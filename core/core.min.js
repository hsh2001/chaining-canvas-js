const ChaningCanvas=((a,b)=>{function c(a){return a in m}function d(a){return+a||0}function e(a,b,c){return a.concat(Array(b).fill()).slice(0,b).map(c||d)}function f(a){return"string"==typeof a||a instanceof CanvasGradient}function g(a){return null!=a&&(Array.isArray(a)||"number"==typeof a.length&&-1<a.length)}function h(a){return a+(["st","nd"][a%10-1]||"th")}function j(a){return a instanceof window.HTMLElement}function k(a,b){const c=a.ctx;return a.path.forEach((d,e)=>{switch(d.type){case"moveTo":c.moveTo(...d.point);break;case"point":c[`${e?"line":"move"}To`](...d.point);break;case"arc":c.arc(...d.params);break;case"bezierCurve":c.bezierCurveTo(...d.params);break;case"ellipse":c.ellipse(...d.params);break;default:throw a.path.length=0,new TypeError(`${b} ${h(i)} element of path data is Unkwon path type.`);}}),a}const l=b.createElement("canvas"),m=l.getContext("2d"),n="Failed to execute",o={moveTo(...a){return{type:"moveTo",point:e(a,2)}},point(...a){return{type:"point",point:e(a,2)}},arc(...a){return{type:"arc",params:e(a,6)}},circle(...a){return a=e(a,3),a.push(0,6.283185307),[o.moveTo(...a),o.arc(...a)]},bezierCurve(...a){return{type:"bezierCurve",params:e(a,6)}},ellipse(...a){return{type:"ellipse",params:e(a,8)}}};return o.lineTo=o.point,class a{constructor(a){this.element=a,this.ctx=a.getContext("2d"),this.path=[]}static create(c){const d=b.createElement("canvas");return c={width:300,height:300,...Object(c)},Object.assign(d,c),new a(d)}static prepareStyle(a){for(let b in a)c(b)||console.warn(`Can't find ${b} is valid style key.`);return a}appendInto(a){if(!j(a))throw new TypeError(`${n} 'appendInto': parameter 1 is not of type 'HTMLElement'.`);return a.appendChild(this.element),this}set(a){return Object.assign(this.ctx,Object(a)),this}execute(a,b){const c=this.ctx;return c.save(),this.set(a),b(this),c.restore(),this}clear(a,b){const c=this.element;return a=a||c.width,b=b||c.height,this.ctx.clearRect(0,0,a,b),this}closePath(){return this.ctx.closePath(),this.path.length=0,this}addPath(a){const b=this.ctx,c=`${n} 'addPath':`;let d=a(o);if(!g(d))throw new Error(`${c} callback function must return value, which is type of Array.`);return d=Array.from(d).flat(1/0),d.forEach((a,b)=>{if(!a||!a.type)throw new Error(`${c} ${h(b)} element of path data is Unkwon path type.`)}),this.path.push(...d),this}fill(a,b,c,d,e){const g=this.element,h=this.ctx;return(a=f(a)?{fillStyle:a}:{},[0,1].includes(arguments.length)&&this.path.length)?k(this,`${n} 'fill':`).execute(a,()=>h.fill()):(b=b||0,c=c||0,d=null==d?g.width:d,e=null==e?g.height:e,this.execute(a,()=>h.fillRect(b,c,d,e)))}stroke(a){return k(this,`${n} 'stroke':`).execute(a,a=>a.ctx.stroke())}}})(this,document);
